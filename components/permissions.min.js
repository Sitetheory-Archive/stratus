!function(root,factory){"function"==typeof define&&define.amd?define(["stratus","jquery","underscore","angular","angular-material"],factory):factory(root.Stratus,root.$,root._)}(this,function(Stratus,$,_){Stratus.Components.Permissions={bindings:{permissionId:"<",ngModel:"="},controller:function($scope,$timeout,$attrs,$http){var $ctrl=this;Stratus.Internals.CssLoader(Stratus.BaseUrl+"sitetheorystratus/stratus/components/permissions"+(Stratus.Environment.get("production")?".min":"")+".css"),$scope.permissionSelected=[],$scope.complete=!1,$scope.permissions=[{value:1,name:"View"},{value:2,name:"Create"},{value:4,name:"Edit"},{value:8,name:"Delete"},{value:16,name:"Publish"},{value:32,name:"Design"},{value:64,name:"Dev"},{value:128,name:"Master"}],$scope.userRoleSelected=null,$scope.updateUserRole=null,$scope.contentSelected=null,$scope.updateContent=null,$scope.$watch("$ctrl.permissionId",function(permissionId){void 0!==permissionId&&$scope.getPermission(permissionId)}),$scope.getPermission=function(permissionId){return $http({method:"GET",url:"/Api/Permission/"+permissionId,headers:{"Content-Type":"application/json"}}).then(function(response){if(response){var data=response.data.payload;permissions=data.summary,angular.forEach(permissions,function(permission,index){(index=$scope.permissions.findIndex(function(x){return x.name===permission}))>-1&&$scope.permissionSelected.push($scope.permissions[index].value)}),$ctrl.ngModel.data.permissions=$scope.permissionSelected,$scope.userRoleSelected=data.identityRole?data.identityRole:data.identityUser,$scope.updateUserRole=data.identityRole?data.identityRole:data.identityUser,$scope.updateContent={name:data.assetContent,assetType:data.asset,id:data.assetId}}},function(response){console.log("response error",response)})},$scope.identityQuery=function(collection,query){var results=collection.filter(query);return Promise.resolve(results).then(function(value){var response=[];return value.User&&(value.User.name+=" - "+value.User.id,response=response.concat(value.User)),value.Role&&(value.Role.bestName+=" - "+value.Role.id,response=response.concat(value.Role)),value.User||value.Role||(value.name?value.name+=" - "+value.id:value.bestName&&(value.bestName+=" - "+value.id),response=response.concat(value)),response})},$scope.contentQuery=function(collection,query){var results=collection.filter(query);return Promise.resolve(results).then(function(value){var response=[];return value.Bundle&&(angular.forEach(value.Bundle,function(bundle,index){value.Bundle[index].type="Bundle",value.Bundle[index].assetType="SitetheoryContentBundle:Bundle"}),response=response.concat(value.Bundle)),value.Content&&(angular.forEach(value.Content,function(content,index){value.Content[index].type="Content",value.Content[index].assetType="Sitetheory"+content.contentType.bundle.name+"Bundle:"+content.contentType.entity}),response=response.concat(value.Content)),value.ContentType&&(angular.forEach(value.ContentType,function(contentType,index){value.ContentType[index].type="ContentType",value.ContentType[index].assetType="SitetheoryContentBundle:ContentType"}),response=response.concat(value.ContentType)),value.Bundle||value.Content||value.ContentType||(response=response.concat(value)),response})},$scope.selectedUserRoleChange=function(item){$scope.userRoleSelected=item,$scope.userRoleSelected&&$scope.userRoleSelected.name?($ctrl.ngModel.data.identityRole=item,$ctrl.ngModel.data.identityUser=null):($ctrl.ngModel.data.identityRole=null,$ctrl.ngModel.data.identityUser=item)},$scope.selectedContentChange=function(content){$scope.contentSelected=content,"Content"===$scope.contentSelected.type?$ctrl.ngModel.data.assetId=$scope.contentSelected.version.meta.id:$ctrl.ngModel.data.assetId=$scope.contentSelected.id,$ctrl.ngModel.data.asset=$scope.contentSelected.assetType},$scope.processSelectAction=function(){-1==$scope.permissionSelected.indexOf(128)&&$scope.permissionSelected.length!=$scope.permissions.length-1||($scope.permissionSelected=[$scope.permissions[$scope.permissions.length-1].value]),$ctrl.ngModel.data.permissions=$scope.permissionSelected},$scope.selectedIdentify=function(item){return item.name?item.name+" - "+item.id:item.bestName+" - "+item.id},$scope.selectedContent=function(item){return item.version?item.version+" - "+item.verision.meta.id:item.name?item.name+" - "+item.id:void 0},$scope.processDataSubmit=function(){return $scope.userRoleSelected&&$scope.userRoleSelected.name?{identity:{role:$scope.userRoleSelected.id},asset:{asset:$scope.contentSelected.assetType,id:$scope.contentSelected.id},permissions:$scope.permissionSelected}:{identity:{user:$scope.userRoleSelected.id},asset:{asset:$scope.contentSelected.assetType,id:$scope.contentSelected.id},permissions:$scope.permissionSelected}},$scope.submit=function(){var data=$scope.processDataSubmit(),url="/Api/Permission",method="POST";return $ctrl.permissionId&&(url+="/"+$ctrl.permissionId,method="PUT"),$http({method:method,url:url,data:data,headers:{"Content-Type":"application/json"}}).then(function(response){console.log("response",response)},function(response){console.log("response error",response)})}},templateUrl:Stratus.BaseUrl+"sitetheorystratus/stratus/components/permissions"+(Stratus.Environment.get("production")?".min":"")+".html"}});